<section id="reserve-title">
  <a href= '/'><h1 class="flow-text center-align" id="reserve">Reservation Status</h1></a>
</section>

<div class= "row">
<div class="col s12 m12 l12 ">
  <div class = "center-align">
  <a href="/res"><button class="btn waves-effect waves-light btn-large blue darken-4 z-depth-2" type="submit" name="action">
    Make More Reservations
    <i class="material-icons right">access_time</i>
  </button></a>
  </div>
</div>
</div>

 <div class="row">
      <div class="col-lg-12">

        <!-- Current Tables in Use -->
        <div class="card">
          <div class="card-header">
            <h4>Current Reservations</h4>
          </div>
          <div class="card-body">
            <ul id="tableList" class="list-group"></ul>
          </div>
        </div>

       

 <footer class="footer mt-4">
      <div class="container">
        <p><a href="#" id="clear">Clear Table</a> | <a href="/api/tables">API Table Link</a> 
      </div>
    </footer>

<footer class="section grey darken-1 white-text center ">
  <p class="flow-text ">Los Angeles Reserve &copy; 2018</p>
</footer>


  
 <script type="text/javascript">

  // In this code, jQuery is used to "download" the data from our server
  // We then dynamically display this content in our table. This is very similar to the group projects you just completed.
  // It's also very similar to the NYT search application. In fact, I copied a ton of code from there.

  function runTableQuery() {
    // The AJAX function uses the URL of our API to GET the data associated with it (initially set to localhost)
    $.ajax({ url: "/api/tables", method: "GET" })
      .then(function(tableData) {

        // Here we then log the tableData to console, where it will show up as an object.
        console.log(tableData);
        console.log("------------------------------------");

        // Loop through and display each of the customers
        for (var i = 0; i < tableData.length; i++) {

          // Get a reference to the tableList element and populate it with tables
          var tableList = $("#tableList");

          // Then display the fields in the HTML (Section Name, Date, URL)
          var listItem = $("<li class='list-group-item mt-8'>");

          listItem.append(
            $("<h2>").text("ID #" + (i + 1)),
            $("<hr>"),
            $("<h2>").text("Name: " + tableData[i].name),
            $("<h2>").text("Email: " + tableData[i].email),
            $("<h2>").text("Phone: " + tableData[i].phoneNumber),
            $("<h2>").text("Attraction: " + tableData[i].attractions),
            $("<h2>").text("Time: " + tableData[i].time)
          );

          tableList.append(listItem);
        }
      });
  }

  

  // This function resets all of the data in our tables. This is intended to let you restart a demo.
  function clearTable() {
    alert("Clearing...");

    // Clear the tables on the server and then empty the elements on the client
    $.ajax({ url: "/api/clear", method: "POST" }).then(function() {
      $("#waitList").empty();
    });
  }

  $("#clear").on("click", clearTable);


  // Run Queries!
  // ==========================================
  runTableQuery();
  


</script>
  
</script>